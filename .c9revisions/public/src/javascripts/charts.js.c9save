{"ts":1362507154784,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362507173129,"patch":[[{"diffs":[[1,"window.jQuery = window.jQuery || {};\r\nwindow._ = window._ || {};\r\nwindow.Backbone = window.Backbone || {};\r\nwindow.Highcharts = window.Highcharts || {};\r\nwindow.Salaries = window.Salaries || {Models: {}, Views: {}, Collections: {}, Routers: {}};\r\nwindow.FusionTable = window.FusionTable || {};\r\nwindow.util = window.util || {};\r\n(function(window, $, _, Backbone, Highcharts, app, db, util) {\r\n    \r\n    \r\n    \r\n})(window, window.jQuery, window._, window.Backbone, window.Highcharts, window.Salaries, window.FusionTable, window.util);"]],"start1":0,"start2":0,"length1":0,"length2":533}]],"length":533,"saved":false}
{"ts":1362507342568,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"app.Views.Charts.SizeVsDollarsBar = Backbone.View.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n            util.loading(true);\r\n            this.collection.fetch({ // TODO: Need error handler\r\n                complete: function() {util.loading(false);}              \r\n            });\r\n        }\r\n        ,render: function() {\r\n            var series = [];\r\n            this.collection.each(function(row) {\r\n                series.push({\r\n                    name: row.get(\"department\")\r\n                    ,data: [row.get(\"count\"), row.get(\"salaries\")]\r\n                });\r\n            });\r\n            this.chart = new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,type: \"bar\"\r\n                    ,zoomType: \"y\"\r\n                    ,height: \"300\"\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                }\r\n                ,title: {\r\n                    text: \"Salary Dollars vs # of Employees per Department (Percentage of City)\"\r\n                }\r\n                ,subtitle: {\r\n                    text: document.ontouchstart === undefined ? \"Click and drag to zoom in\" : \"Drag your finger to zoom in\"\r\n                }\r\n                ,xAxis: {\r\n                    categories: [\"# of Employees\", \"Salary Dollars\"]\r\n                }\r\n                ,yAxis: {\r\n                    min: 0\r\n                    ,title: {\r\n                        text: \"Percentage of City\"\r\n                    }\r\n                }\r\n                ,tooltip: {\r\n                    formatter: function() {\r\n                        return this.series.name + \": \" + (this.key === \"Salary Dollars\" ? \"$\" : \"\") + util.formatNumber(this.y) +' ('+ Math.round(this.percentage*100)/100 +'%)';\r\n                    }\r\n                }\r\n                ,plotOptions: {\r\n                    series: {\r\n                        stacking: \"percent\"\r\n                    }\r\n                }\r\n                ,legend: { enabled: false }\r\n                ,series: series\r\n            });\r\n        }\r\n    });"],[0,"\r\n    \r\n})(w"]],"start1":391,"start2":391,"length1":24,"length2":2155}]],"length":2664,"saved":false}
{"ts":1362507537075,"patch":[[{"diffs":[[0,"l) {\r\n    \r\n"],[1,"    app.Views.Charts = app.Views.Charts || {};\r\n    \r\n"],[0,"    app.View"]],"start1":387,"start2":387,"length1":24,"length2":78}]],"length":2718,"saved":false}
{"ts":1362507570514,"patch":[[{"diffs":[[0," {\r\n            "],[1,"//"],[0,"this.collection."]],"start1":547,"start2":547,"length1":32,"length2":34},{"diffs":[[0,"    "],[-1,"    util.loading(true);\r\n            this.collection.fetch({ // TODO: Need error handler\r\n                complete: function() {util.loading(false);}              \r\n            });\r\n        }\r\n        ,r"],[1,"}\r\n        ,afterR"],[0,"ende"]],"start1":618,"start2":618,"length1":211,"length2":26}]],"length":2535,"saved":false}
{"ts":1362507661374,"patch":[[{"diffs":[[0,"ackbone."],[-1,"View"],[1,"Layout"],[0,".extend("]],"start1":494,"start2":494,"length1":20,"length2":22}]],"length":2537,"saved":false}
{"ts":1362507695382,"patch":[[{"diffs":[[0,"    "],[-1,"//"],[0,"this"]],"start1":561,"start2":561,"length1":10,"length2":8},{"diffs":[[0,"\", this."],[-1,"r"],[1,"afterR"],[0,"ender, t"]],"start1":590,"start2":590,"length1":17,"length2":22}]],"length":2540,"saved":false}
{"ts":1362507702861,"patch":[[{"diffs":[[0,"\", this."],[-1,"afterR"],[1,"r"],[0,"ender, t"]],"start1":590,"start2":590,"length1":22,"length2":17}]],"length":2535,"saved":false}
{"ts":1362507892396,"patch":[[{"diffs":[[0," util) {\r\n    \r\n"],[1,"    app.Views.Visualize = Backbone.Layout.extend({\r\n        charts: {}\r\n        ,events: {\r\n            \"click .department\": \"toggleDepartment\"\r\n        }\r\n        ,toggleDepartment: function(e) {\r\n            e.preventDefault();\r\n            \r\n            var departmentid = $(e.currentTarget).data(\"value\")\r\n                ,title = $(e.currentTarget).text();\r\n                \r\n            // Set link to active\r\n            $(e.currentTarget).parent(\"li\").toggleClass(\"active\");\r\n            \r\n            // If chart already exists, show/hide it; otherwise, create it\r\n            if(this.charts[departmentid] !== undefined) {\r\n                this.charts[departmentid].$el.toggle();\r\n            } else {\r\n                this.charts[departmentid] = new app.Views.Charts.SalaryGroup({\r\n                    collection: new app.Collections.SalaryGroups(null, {settings: {department: departmentid}})\r\n                    ,title: title\r\n                });\r\n                this.$(\".chart\").append(this.charts[departmentid].el);\r\n            }\r\n        }\r\n    });\r\n    \r\n"],[0,"    app.Views.Ch"]],"start1":383,"start2":383,"length1":32,"length2":1105}]],"length":3608,"saved":false}
{"ts":1362507936574,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"    app.Views.Charts.SalaryGroup = Backbone.Layout.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n        }\r\n        ,afterRender: function() {\r\n            var keyvals = {}, series = [], i, highestSalaryGroup;\r\n            \r\n            // Reformat data to key/value object {salarygroup: count, ...}\r\n            this.collection.each(function(row) {\r\n                keyvals[row.get(\"salarygroup\")] = row.get(\"count\");\r\n                highestSalaryGroup = row.get(\"salarygroup\"); // Will keep getting updated until the last record (only works since it's a sorted collection)\r\n            });\r\n            \r\n            // From the highest salary group, work backwards every salary group and make sure a row exists for it\r\n            for(i = highestSalaryGroup; i >= 0; i -= 10) {\r\n                if(keyvals[i] === undefined) keyvals[i] = 0;\r\n            } // TODO: This doesn't seem to be ordering right in iOS; colors don't match up\r\n            \r\n            // Prepare data for Highcharts\r\n            _.each(keyvals, function(val, key) {\r\n               series.push({\r\n                   name: key\r\n                   ,data: [val]\r\n               });\r\n            });\r\n            \r\n            // Render chart\r\n            this.chart = new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,type: \"bar\"\r\n                    ,zoomType: \"y\"\r\n                    ,height: \"200\"\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                }\r\n                ,title: {\r\n                    text: this.options.title\r\n                }\r\n                ,subtitle: {\r\n                    text: document.ontouchstart === undefined ? \"Click and drag to zoom in\" : \"Drag your finger to zoom in\"\r\n                }\r\n                ,xAxis: {\r\n                    categories: [\"Salary Bucket\"]\r\n                }\r\n                ,yAxis: {\r\n                    min: 0\r\n                    ,title: {\r\n                        text: \"Percentage of Employees\"\r\n                    }\r\n                    ,labels: {\r\n                        formatter: function() {\r\n                            return Math.abs(this.value - 100) + \"%\";\r\n                        }\r\n                    }\r\n                    ,reversed: true\r\n                    //,labels: {enabled: false}\r\n                }\r\n                ,tooltip: {\r\n                    formatter: function() {\r\n                        return \"$\" + this.series.name + \"-\" + (parseInt(this.series.name, 0) + 9) + \"k: \" + util.formatNumber(this.y) +' ('+ Math.round(this.percentage) +'%)';\r\n                    }\r\n                }\r\n                ,plotOptions: {\r\n                    series: {\r\n                        stacking: \"percent\"\r\n                    }\r\n                }\r\n                ,legend: { enabled: false }\r\n                ,series: series\r\n            });\r\n        }\r\n    });\r\n    \r\n"],[0,"})(windo"]],"start1":3478,"start2":3478,"length1":16,"length2":2999}]],"length":6591,"saved":false}
{"ts":1362507990462,"patch":[[{"diffs":[[0,"ts: {}\r\n"],[1,"        ,initialize: function() {\r\n            _.bindAll(this, \"toggleDepartment\");\r\n        }\r\n"],[0,"        "]],"start1":463,"start2":463,"length1":16,"length2":112},{"diffs":[[0,",events: {\r\n"],[-1,""],[0,"            "]],"start1":575,"start2":575,"length1":24,"length2":24},{"diffs":[[0,"partment"],[-1,"id"],[0," = $(e.c"]],"start1":758,"start2":758,"length1":18,"length2":16},{"diffs":[[0,"partment"],[-1,"id"],[0,"] !== un"]],"start1":1096,"start2":1096,"length1":18,"length2":16},{"diffs":[[0,"partment"],[-1,"id"],[0,"].$el.to"]],"start1":1154,"start2":1154,"length1":18,"length2":16},{"diffs":[[0,"           });\r\n"],[-1,""],[0,"                "]],"start1":1433,"start2":1433,"length1":32,"length2":32},{"diffs":[[0,"ntid].el);\r\n"],[1,"                \r\n                this.charts[department] = this.insertView\r\n"],[0,"            "]],"start1":1509,"start2":1509,"length1":24,"length2":101}]],"length":6758,"saved":false}
{"ts":1362508075374,"patch":[[{"diffs":[[0,"                "],[1,"/*"],[0,"this.charts[depa"]],"start1":1201,"start2":1201,"length1":32,"length2":34},{"diffs":[[0,"id].el);"],[1,"*/"],[0,"\r\n      "]],"start1":1513,"start2":1513,"length1":16,"length2":18},{"diffs":[[0,"    "],[-1,"this.charts[department] = this.insertView"],[1,"var salarygroups = new app.Collections.SalaryGroups(null, {settings: {department: department}});\r\n                this.charts[department] = this.insertView(\".chart\", new app.Views.Charts.SalaryGroup({collection: salarygroups, title: title}));"],[0,"\r\n  "]],"start1":1555,"start2":1555,"length1":49,"length2":250}]],"length":6963,"saved":false}
{"ts":1362508087136,"patch":[[{"diffs":[[0," title}));\r\n"],[1,"                this.charts[department].render();\r\n"],[0,"            "]],"start1":1791,"start2":1791,"length1":24,"length2":75}]],"length":7014,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362508293641,"patch":[[{"diffs":[[0,"artment\");\r\n"],[1,"            this.collection.on(\"reset\", this.render, this);\r\n"],[0,"        }\r\n "]],"start1":544,"start2":544,"length1":24,"length2":85}]],"length":7075,"saved":false}
{"ts":1362508316421,"patch":[[{"diffs":[[0,"s);\r\n        }\r\n"],[1,"        ,serialize: function() {\r\n            return {\r\n                departments: this.collection.toJSON()\r\n            };\r\n        }\r\n"],[0,"        ,events:"]],"start1":612,"start2":612,"length1":32,"length2":170}]],"length":7213,"saved":false}
{"ts":1362509446109,"patch":[[{"diffs":[[0,"ews."],[-1,"Visualize"],[1,"SalaryGroups"],[0," = B"]],"start1":409,"start2":409,"length1":17,"length2":20},{"diffs":[[0,"({\r\n        "],[1,"template: \"salarygroups.html\"\r\n        ,"],[0,"charts: {}\r\n"]],"start1":450,"start2":450,"length1":24,"length2":64},{"diffs":[[0,"(\".chart"],[1,"s"],[0,"\", new a"]],"start1":1956,"start2":1956,"length1":16,"length2":17}]],"length":7257,"saved":false}
{"ts":1362509531128,"patch":[[{"diffs":[[0,"   /"],[-1,"*this.charts[departmentid] = new app.Views.Charts.S"],[1,"/ Fetch s"],[0,"alary"],[-1,"G"],[1," g"],[0,"roup"],[-1,"({"],[1,"s"],[0,"\r\n  "]],"start1":1456,"start2":1456,"length1":71,"length2":29},{"diffs":[[0,"    "],[-1,"    collection:"],[1,"var salarygroups ="],[0," new"]],"start1":1495,"start2":1495,"length1":23,"length2":26},{"diffs":[[0,"ment"],[-1,"id"],[0,"}})"],[1,";"],[0,"\r\n  "]],"start1":1587,"start2":1587,"length1":13,"length2":12},{"diffs":[[0,"    "],[-1,"    ,title: title\r\n                });\r\n                this.$(\".chart\").append(this.charts[departmentid].el);*/"],[1,"util.loading(true);\r\n                app.departments.fetch({ // TODO: Need error handler\r\n                    complete: function() {util.loading(false);}"],[0,"\r\n  "]],"start1":1609,"start2":1609,"length1":120,"length2":161},{"diffs":[[0,"                "],[1,"});"],[0,"\r\n              "]],"start1":1768,"start2":1768,"length1":32,"length2":35},{"diffs":[[0,"    "],[-1,"var salarygroups = new app.Collections.SalaryGroups(null, {settings: {department: department}});"],[0,"\r\n  "]],"start1":1801,"start2":1801,"length1":104,"length2":8}]],"length":7165,"saved":false}
{"ts":1362509550009,"patch":[[{"diffs":[[0,"    "],[-1,"app.department"],[1,"salarygroup"],[0,"s.fe"]],"start1":1646,"start2":1646,"length1":22,"length2":19}]],"length":7162,"saved":false}
{"ts":1362509582010,"patch":[[{"diffs":[[0,"    "],[-1,"complete"],[1,"success: function() {util.loading(false);} // Why doesn't complete work for this?\r\n                    ,error"],[0,": fu"]],"start1":1716,"start2":1716,"length1":16,"length2":117}]],"length":7263,"saved":false}
{"ts":1362509668159,"patch":[[{"diffs":[[0,"        "],[-1,"var"],[0," series "]],"start1":2410,"start2":2410,"length1":19,"length2":16},{"diffs":[[0,");\r\n            "],[-1,"this."],[0,"chart = new High"]],"start1":2665,"start2":2665,"length1":37,"length2":32}]],"length":7255,"saved":false}
{"ts":1362509690053,"patch":[[{"diffs":[[0,"            "],[-1," "],[1,"window."],[0,"series = [];"]],"start1":2406,"start2":2406,"length1":25,"length2":31},{"diffs":[[0,"            "],[1,"window."],[0,"chart = new "]],"start1":2675,"start2":2675,"length1":24,"length2":31}]],"length":7268,"saved":false}
{"ts":1362509694019,"patch":[[{"diffs":[[0,"                "],[1,"window."],[0,"series.push({\r\n "]],"start1":2489,"start2":2489,"length1":32,"length2":39}]],"length":7275,"saved":false}
{"ts":1362509699572,"patch":[[{"diffs":[[0,"       ,series: "],[1,"window."],[0,"series\r\n        "]],"start1":4103,"start2":4103,"length1":32,"length2":39}]],"length":7282,"saved":false}
{"ts":1362509738765,"patch":[[{"diffs":[[0,"            "],[-1,"window."],[1,"var "],[0,"series = [];"]],"start1":2406,"start2":2406,"length1":31,"length2":28},{"diffs":[[0,"        "],[-1,"window."],[0,"series.p"]],"start1":2494,"start2":2494,"length1":23,"length2":16},{"diffs":[[0,"        "],[-1,"window"],[1,"this"],[0,".chart ="]],"start1":2676,"start2":2676,"length1":22,"length2":20},{"diffs":[[0,"series: "],[-1,"window."],[0,"series\r\n"]],"start1":4099,"start2":4099,"length1":23,"length2":16},{"diffs":[[0,"        "],[-1,"var"],[0," keyvals"]],"start1":4365,"start2":4365,"length1":19,"length2":16},{"diffs":[[0," chart\r\n"],[1,""],[0,"        "]],"start1":5425,"start2":5425,"length1":16,"length2":16},{"diffs":[[0,"rt\r\n            "],[-1,"this."],[0,"chart = new High"]],"start1":5429,"start2":5429,"length1":37,"length2":32}]],"length":7255,"saved":false}
{"ts":1362509767403,"patch":[[{"diffs":[[0," {\r\n            "],[1,"var"],[0," keyvals = {}, s"]],"start1":4357,"start2":4357,"length1":32,"length2":35},{"diffs":[[0,"als = {}"],[1,"/*"],[0,", series"]],"start1":4381,"start2":4381,"length1":16,"length2":18},{"diffs":[[0,"es = [],"],[1,"*/"],[0," i, high"]],"start1":4397,"start2":4397,"length1":16,"length2":18},{"diffs":[[0,"Group;\r\n"],[1,"            series = [];\r\n"],[0,"        "]],"start1":4424,"start2":4424,"length1":16,"length2":42}]],"length":7288,"saved":false}
{"ts":1362509778279,"patch":[[{"diffs":[[0,"= {}"],[1,","],[0,"/*"],[-1,","],[0," ser"]],"start1":4385,"start2":4385,"length1":11,"length2":11}]],"length":7288,"saved":false}
{"ts":1362509849311,"patch":[[{"diffs":[[0," {},"],[-1,"/*"],[0," ser"]],"start1":4386,"start2":4386,"length1":10,"length2":8},{"diffs":[[0," [],"],[-1,"*/"],[0," i, "]],"start1":4399,"start2":4399,"length1":10,"length2":8},{"diffs":[[0,"p;\r\n"],[-1,"            series = [];\r\n"],[0,"    "]],"start1":4424,"start2":4424,"length1":34,"length2":8},{"diffs":[[0,"            "],[1,"this."],[0,"chart = new "]],"start1":5436,"start2":5436,"length1":24,"length2":29}]],"length":7263,"saved":false}
{"ts":1362509871783,"patch":[[{"diffs":[[0,"ls = {},"],[1,"/*"],[0," series "]],"start1":4382,"start2":4382,"length1":16,"length2":18},{"diffs":[[0,"es = [],"],[1,"*/"],[0," i, high"]],"start1":4397,"start2":4397,"length1":16,"length2":18},{"diffs":[[0,"Group;\r\n"],[1,"            series = [];\r\n"],[0,"        "]],"start1":4424,"start2":4424,"length1":16,"length2":42},{"diffs":[[0,"rt\r\n            "],[-1,"this."],[0,"chart = new High"]],"start1":5462,"start2":5462,"length1":37,"length2":32}]],"length":7288,"saved":false}
{"ts":1362512859356,"patch":[[{"diffs":[[0," {},"],[-1,"/*"],[0," ser"]],"start1":4386,"start2":4386,"length1":10,"length2":8},{"diffs":[[0," [],"],[-1,"*/"],[0," i, "]],"start1":4399,"start2":4399,"length1":10,"length2":8},{"diffs":[[0,"p;\r\n"],[-1,"            series = [];\r\n"],[0,"    "]],"start1":4424,"start2":4424,"length1":34,"length2":8},{"diffs":[[0,"            "],[1,"this."],[0,"chart = new "]],"start1":5436,"start2":5436,"length1":24,"length2":29}]],"length":7263,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362578235585,"patch":[[{"diffs":[[0,"           });\r\n"],[1,"            this.chart.Chart.addSeries(series);\r\n"],[0,"        }\r\n    }"]],"start1":7099,"start2":7099,"length1":32,"length2":81}]],"length":7312,"saved":false}
{"ts":1362578254549,"patch":[[{"diffs":[[0,"});\r\n           "],[1," if(!_.isEmpty(series))"],[0," this.chart.Char"]],"start1":7110,"start2":7110,"length1":32,"length2":55}]],"length":7335,"saved":false}
{"ts":1362578262705,"patch":[[{"diffs":[[0,"art."],[-1,"Chart."],[0,"addS"]],"start1":7157,"start2":7157,"length1":14,"length2":8}]],"length":7329,"saved":false}
{"ts":1362578303221,"patch":[[{"diffs":[[0," if("],[-1,"!_.isEmpty(series))"],[1,"series.length) {\r\n                this.chart.xAxis.categories.push(\"Test\");\r\n               "],[0," thi"]],"start1":7126,"start2":7126,"length1":27,"length2":100},{"diffs":[[0,"s(series);\r\n"],[1,"            }\r\n"],[0,"        }\r\n "]],"start1":7242,"start2":7242,"length1":24,"length2":39}]],"length":7417,"saved":false}
{"ts":1362578330264,"patch":[[{"diffs":[[0,".length) {\r\n"],[1,"                console.log(this.chart);\r\n"],[0,"            "]],"start1":7136,"start2":7136,"length1":24,"length2":66}]],"length":7459,"saved":false}
{"ts":1362578869472,"patch":[[{"diffs":[[0,");\r\n"],[-1,"            if(series.length) {\r\n                console.log(this.chart);\r\n                this.chart.xAxis.categories.push(\"Test\");\r\n                this.chart.addSeries(series);\r\n            }\r\n"],[0,"    "]],"start1":7111,"start2":7111,"length1":204,"length2":8}]],"length":7263,"saved":false}
{"ts":1362578890379,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"categories: [\"Sa"]],"start1":6038,"start2":6038,"length1":32,"length2":34}]],"length":7265,"saved":false}
{"ts":1362578904489,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"categori"]],"start1":6046,"start2":6046,"length1":18,"length2":16},{"diffs":[[0,": [\""],[-1,"Salary Bucket"],[0,"\"]\r\n"]],"start1":6064,"start2":6064,"length1":21,"length2":8}]],"length":7250,"saved":false}
{"ts":1362578977375,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"categories: [\"\"]"]],"start1":6038,"start2":6038,"length1":32,"length2":34},{"diffs":[[0,"ries: [\"\"]\r\n"],[1,"                    labels: {enabled: false}\r\n"],[0,"            "]],"start1":6062,"start2":6062,"length1":24,"length2":70}]],"length":7298,"saved":false}
{"ts":1362578986299,"patch":[[{"diffs":[[0," {\r\n"],[-1,"                    //categories: [\"\"]\r\n"],[0,"    "]],"start1":6030,"start2":6030,"length1":48,"length2":8}]],"length":7258,"saved":false}
{"ts":1362579774774,"patch":[[{"diffs":[[0,"\n            }\r\n"],[1,"            $(window).scrollTop(this.charts[department].$el.offset().top - 80);\r\n"],[0,"        }\r\n    }"]],"start1":2102,"start2":2102,"length1":32,"length2":113}]],"length":7339,"saved":false}
{"ts":1362580258122,"patch":[[{"diffs":[[0," util) {\r\n    \r\n"],[1,"    app.Views.VisualizeLanding = Backbone.Layout.extend({\r\n        template: \"visualize-landing.html\"\r\n    })\r\n    \r\n"],[0,"    app.Views.Sa"]],"start1":383,"start2":383,"length1":32,"length2":149}]],"length":7456,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362580545646,"patch":[[{"diffs":[[0,"\r\n    })"],[1,";"],[0,"\r\n    \r\n"]],"start1":500,"start2":500,"length1":16,"length2":17},{"diffs":[[0,"\n    });\r\n    \r\n"],[1,"    app.Views.Charts.SizeVsDollarsLine = Backbone.Layout.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n        }\r\n        ,afterRender: function() {\r\n        }\r\n    });\r\n    \r\n"],[0,"    app.Views.Ch"]],"start1":4341,"start2":4341,"length1":32,"length2":267}]],"length":7692,"saved":false}
{"ts":1362580558464,"patch":[[{"diffs":[[0,": function() {\r\n"],[1,"            var categories = [], employees = [], salaries = [];\r\n            this.collection.each(function(row) {\r\n                categories.push(row.get(\"department\"));\r\n                employees.push(row.get(\"count\"));\r\n                salaries.push(row.get(\"salaries\"));\r\n            });\r\n                \r\n            new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,zoomType: \"x\"\r\n                    ,height: \"300\"\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                }\r\n                ,title: {\r\n                    text: \"Salary Dollars vs # of Employees per Department\"\r\n                }\r\n                ,subtitle: {\r\n                    text: document.ontouchstart === undefined ? \"Click and drag to zoom in\" : \"Drag your finger to zoom in\"\r\n                }\r\n                ,xAxis: [{\r\n                    categories: categories\r\n                    ,labels: {enabled: false}\r\n                }]\r\n                ,yAxis: [\r\n                    { // Primary yAxis\r\n                        title: {\r\n                            text: \"# of Employees\"\r\n                            ,style: {color: \"#4572A7\"}\r\n                        }\r\n                        ,labels: {\r\n                            formatter: function() {\r\n                                return util.formatNumber(this.value);\r\n                            }\r\n                            ,style: {color: \"#4572A7\"}\r\n                        }\r\n                    }\r\n                    ,{ // Secondary yAxis\r\n                        title: {\r\n                            text: \"Salary Dollars\",\r\n                            style: {color: \"#89A54E\"}\r\n                        }\r\n                        ,labels: {\r\n                            formatter: function() {\r\n                                return \"$\" + util.formatNumber(this.value);\r\n                            }\r\n                            ,style: {color: \"#89A54E\"}\r\n                        }\r\n                        ,opposite: true\r\n                        ,min: 0\r\n                    }\r\n                ]\r\n                ,tooltip: {\r\n                    formatter: function() {\r\n                        return this.x + \": \" + (this.series.name === \"Salary Dollars\" ? \"$\" : \"\") + util.formatNumber(this.y);\r\n                    }\r\n                }\r\n                ,legend: {\r\n                    enabled: false\r\n                    /*layout: 'vertical',\r\n                    align: 'left',\r\n                    x: 120,\r\n                    verticalAlign: 'top',\r\n                    y: 100,\r\n                    floating: true,\r\n                    backgroundColor: '#FFFFFF'*/\r\n                }\r\n                ,series: [\r\n                    {\r\n                        name: '# of Employees'\r\n                        ,color: '#4572A7'\r\n                        ,type: 'column'\r\n                        ,data: employees\r\n                    }\r\n                    ,{\r\n                        name: 'Salary Dollars'\r\n                        ,color: '#89A54E'\r\n                        ,type: 'spline'\r\n                        ,yAxis: 1\r\n                        ,data: salaries\r\n                    }\r\n                ]\r\n            });\r\n"],[0,"        }\r\n    }"]],"start1":4550,"start2":4550,"length1":32,"length2":3311}]],"length":10971,"saved":false}
{"ts":1362580593712,"patch":[[{"diffs":[[0,"\n    });\r\n    \r\n"],[1,"    app.Views.Charts.DollarsPie = Backbone.Layout.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n        }\r\n        ,afterRender: function() {\r\n    \r\n"],[0,"    app.Views.Ch"]],"start1":7855,"start2":7855,"length1":32,"length2":240}]],"length":11179,"saved":false}
{"ts":1362580604993,"patch":[[{"diffs":[[0,"nction() {\r\n"],[1,"            var data = [];\r\n            this.collection.each(function(row) {\r\n                data.push([row.get(\"department\"), row.get(\"salaries\")]);\r\n            });\r\n            \r\n            new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                },\r\n                title: {\r\n                    text: \"Salaries by Department\"\r\n                },\r\n                tooltip: {\r\n                    formatter: function() {\r\n                        return this.key + \": <b>$\" + util.formatNumber(this.y) + \"</b> (\" + Math.round(this.percentage*100)/100 + \"%)\";\r\n                    }\r\n                    ,percentageDecimals: 1\r\n                },\r\n                plotOptions: {\r\n                    pie: {\r\n                        allowPointSelect: true,\r\n                        cursor: 'pointer',\r\n                        dataLabels: {\r\n                            enabled: true,\r\n                            color: '#000000',\r\n                            connectorColor: '#000000',\r\n                            formatter: function() {\r\n                                return '<b>'+ this.point.name +'</b>: '+ this.percentage.toFixed(2) +' %';\r\n                            }\r\n                        }\r\n                    }\r\n                    ,series: {\r\n                        cropThreshold: 10\r\n                    }\r\n                },\r\n                series: [{\r\n                    type: 'pie'\r\n                    ,name: 'Salaries'\r\n                    ,data: data\r\n                    /*,point: {\r\n                        events: {\r\n                            click: function() {\r\n                                alert(\"clicked\");\r\n                            }\r\n                        }\r\n                    }*/\r\n                }]\r\n            });\r\n        }\r\n    });\r\n"],[0,"    \r\n    ap"]],"start1":8061,"start2":8061,"length1":24,"length2":1929}]],"length":13084,"saved":false}
{"ts":1362580731457,"patch":[[{"diffs":[[0,"\n    });\r\n    \r\n"],[1,"    app.Views.Charts.SalaryGroups = Backbone.Layout.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n        }\r\n        ,afterRender: function() {\r\n            var keyvals = {}, series = [], i, highestSalaryGroup;\r\n            \r\n            // Reformat data to key/value object {salarygroup: count, ...}\r\n            this.collection.each(function(row) {\r\n                keyvals[row.get(\"salarygroup\")] = row.get(\"count\");\r\n                highestSalaryGroup = row.get(\"salarygroup\"); // Will keep getting updated until the last record (only works since it's a sorted collection)\r\n            });\r\n            \r\n            // From the highest salary group, work backwards every salary group and make sure a row exists for it\r\n            for(i = highestSalaryGroup; i >= 0; i -= 10) {\r\n                if(keyvals[i] === undefined) keyvals[i] = 0;\r\n            } // TODO: This doesn't seem to be ordering right in iOS; colors don't match up\r\n            \r\n            // Prepare data for Highcharts\r\n            _.each(keyvals, function(val, key) {\r\n               series.push({\r\n                   name: key\r\n                   ,data: [val]\r\n               });\r\n            });\r\n            \r\n            // Render chart\r\n            this.chart = new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,type: \"bar\"\r\n                    ,zoomType: \"y\"\r\n                    ,height: \"200\"\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                }\r\n                ,title: {\r\n                    text: this.options.title\r\n                }\r\n                ,subtitle: {\r\n                    text: document.ontouchstart === undefined ? \"Click and drag to zoom in\" : \"Drag your finger to zoom in\"\r\n                }\r\n                ,xAxis: {\r\n                    labels: {enabled: false}\r\n                }\r\n                ,yAxis: {\r\n                    min: 0\r\n                    ,title: {\r\n                        text: \"Percentage of Employees\"\r\n                    }\r\n                    ,labels: {\r\n                        formatter: function() {\r\n                            return Math.abs(this.value - 100) + \"%\";\r\n                        }\r\n                    }\r\n                    ,reversed: true\r\n                    //,labels: {enabled: false}\r\n                }\r\n                ,tooltip: {\r\n                    formatter: function() {\r\n                        return \"$\" + this.series.name + \"-\" + (parseInt(this.series.name, 0) + 9) + \"k: \" + util.formatNumber(this.y) +' ('+ Math.round(this.percentage) +'%)';\r\n                    }\r\n                }\r\n                ,plotOptions: {\r\n                    series: {\r\n                        stacking: \"percent\"\r\n                    }\r\n                }\r\n                ,legend: { enabled: false }\r\n                ,series: series\r\n            });\r\n        }\r\n    });\r\n    \r\n"],[0,"    app.Views.Ch"]],"start1":2327,"start2":2327,"length1":32,"length2":3011},{"diffs":[[0,"  \r\n"],[-1,"    app.Views.Charts.SalaryGroup = Backbone.Layout.extend({\r\n        initialize: function() {\r\n            this.collection.on(\"reset\", this.render, this);\r\n        }\r\n        ,afterRender: function() {\r\n            var keyvals = {}, series = [], i, highestSalaryGroup;\r\n            \r\n            // Reformat data to key/value object {salarygroup: count, ...}\r\n            this.collection.each(function(row) {\r\n                keyvals[row.get(\"salarygroup\")] = row.get(\"count\");\r\n                highestSalaryGroup = row.get(\"salarygroup\"); // Will keep getting updated until the last record (only works since it's a sorted collection)\r\n            });\r\n            \r\n            // From the highest salary group, work backwards every salary group and make sure a row exists for it\r\n            for(i = highestSalaryGroup; i >= 0; i -= 10) {\r\n                if(keyvals[i] === undefined) keyvals[i] = 0;\r\n            } // TODO: This doesn't seem to be ordering right in iOS; colors don't match up\r\n            \r\n            // Prepare data for Highcharts\r\n            _.each(keyvals, function(val, key) {\r\n               series.push({\r\n                   name: key\r\n                   ,data: [val]\r\n               });\r\n            });\r\n            \r\n            // Render chart\r\n            this.chart = new Highcharts.Chart({\r\n                chart: {\r\n                    renderTo: this.el\r\n                    ,type: \"bar\"\r\n                    ,zoomType: \"y\"\r\n                    ,height: \"200\"\r\n                    ,backgroundColor: \"rgba(255, 255, 255, 0.1)\"\r\n                }\r\n                ,title: {\r\n                    text: this.options.title\r\n                }\r\n                ,subtitle: {\r\n                    text: document.ontouchstart === undefined ? \"Click and drag to zoom in\" : \"Drag your finger to zoom in\"\r\n                }\r\n                ,xAxis: {\r\n                    labels: {enabled: false}\r\n                }\r\n                ,yAxis: {\r\n                    min: 0\r\n                    ,title: {\r\n                        text: \"Percentage of Employees\"\r\n                    }\r\n                    ,labels: {\r\n                        formatter: function() {\r\n                            return Math.abs(this.value - 100) + \"%\";\r\n                        }\r\n                    }\r\n                    ,reversed: true\r\n                    //,labels: {enabled: false}\r\n                }\r\n                ,tooltip: {\r\n                    formatter: function() {\r\n                        return \"$\" + this.series.name + \"-\" + (parseInt(this.series.name, 0) + 9) + \"k: \" + util.formatNumber(this.y) +' ('+ Math.round(this.percentage) +'%)';\r\n                    }\r\n                }\r\n                ,plotOptions: {\r\n                    series: {\r\n                        stacking: \"percent\"\r\n                    }\r\n                }\r\n                ,legend: { enabled: false }\r\n                ,series: series\r\n            });\r\n        }\r\n    });\r\n    \r\n"],[0,"})(w"]],"start1":12959,"start2":12959,"length1":2986,"length2":8}]],"length":13085,"saved":false}
{"ts":1362580760716,"patch":[[{"diffs":[[0,"lection."],[1,"sortBy(\"department\")."],[0,"toJSON()"]],"start1":882,"start2":882,"length1":16,"length2":37},{"diffs":[[0,"aryGroup"],[1,"s"],[0,"({collec"]],"start1":2137,"start2":2137,"length1":16,"length2":17}]],"length":13107,"saved":false}
{"ts":1362580791982,"patch":[[{"diffs":[[0," util) {\r\n    \r\n"],[1,"    app.Views.Charts = app.Views.Charts || {};\r\n    \r\n"],[0,"    app.Views.Vi"]],"start1":383,"start2":383,"length1":32,"length2":86},{"diffs":[[0,"  \r\n"],[-1,"    app.Views.Charts = app.Views.Charts || {};\r\n    \r\n"],[0,"    "]],"start1":5394,"start2":5394,"length1":62,"length2":8}]],"length":13107,"saved":false}
{"ts":1362580819805,"patch":[[{"diffs":[[0,"ion."],[-1,"sortBy(\"department\")."],[0,"toJS"]],"start1":940,"start2":940,"length1":29,"length2":8}]],"length":13086,"saved":false}
{"ts":1362580835283,"patch":[[{"diffs":[[0,": function() {\r\n"],[1,"            this.collection.sortBy(\"department\");\r\n"],[0,"            retu"]],"start1":861,"start2":861,"length1":32,"length2":83}]],"length":13137,"saved":false}
{"ts":1362580853238,"patch":[[{"diffs":[[0,") {\r\n           "],[1," var sortedCollection ="],[0," this.collection"]],"start1":872,"start2":872,"length1":32,"length2":55},{"diffs":[[0,"tments: "],[-1,"this.c"],[1,"sortedC"],[0,"ollectio"]],"start1":994,"start2":994,"length1":22,"length2":23},{"diffs":[[0,"tion"],[-1,".toJSON()"],[0,"\r\n  "]],"start1":1014,"start2":1014,"length1":17,"length2":8}]],"length":13152,"saved":false}
{"ts":1362580859466,"patch":[[{"diffs":[[0,"llection"],[1,".toJSON()"],[0,"\r\n      "]],"start1":1010,"start2":1010,"length1":16,"length2":25}]],"length":13161,"saved":false}
{"ts":1362580871668,"patch":[[{"diffs":[[0,"\"department\");\r\n"],[1,"            console.log(sortedCollection);\r\n"],[0,"            retu"]],"start1":935,"start2":935,"length1":32,"length2":76}]],"length":13205,"saved":false}
{"ts":1362580938339,"patch":[[{"diffs":[[0," {\r\n"],[-1,"            var sortedCollection = this.collection.sortBy(\"department\");\r\n            console.log(sortedCollection);\r\n"],[0,"    "]],"start1":873,"start2":873,"length1":126,"length2":8},{"diffs":[[0,"ts: "],[1,"_."],[0,"sort"],[-1,"edC"],[1,"By(this.c"],[0,"olle"]],"start1":924,"start2":924,"length1":15,"length2":23},{"diffs":[[0,"toJSON()"],[1,", \"department\")"],[0,"\r\n      "]],"start1":953,"start2":953,"length1":16,"length2":31}]],"length":13110,"saved":false}
