{"ts":1362504173277,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362504201168,"patch":[[{"diffs":[[1,"window.jQuery = window.jQuery || {};\r\nwindow._ = window._ || {};\r\nwindow.Backbone = window.Backbone || {};\r\nwindow.Salaries = window.Salaries || {Models: {}, Views: {}, Collections: {}, Routers: {}};\r\nwindow.FusionTable = window.FusionTable || {};\r\nwindow.util = window.util || {};\r\n(function(window, $, _, Backbone, app, db, util) {\r\n    \r\n    // TODO: Since this is not paginated, sorting should be done with javascript\r\n    app.Collections.Departments = Backbone.Collection.extend({\r\n        defaultSettings: {\r\n            fields: [\"departmentid\", \"department\", \"salaries\", \"count\"]\r\n            ,group: true\r\n            ,orderby: \"salaries\"\r\n            ,dir: \"desc\"\r\n        }\r\n        ,initialize: function(models, options) {\r\n            this.settings = _.defaults(options.settings || {}, this.defaultSettings);\r\n            this.sum = 0;\r\n            this.count = 0;\r\n            this.sortProps = util.getSortProps(this.settings);\r\n        }\r\n        ,url: function() { return db.buildUrl(db.query(this.settings)) + \"&callback=?\"; }\r\n        ,export: function() { return db.buildExportUrl(db.query(_.omit(this.settings, [\"limit\", \"offset\"]))); }\r\n        ,parse: function(response) {\r\n            // Convert array of arrays to array of objects with our keys/fields\r\n            var objects = [], object, i, key, self = this;\r\n            if(response.rows !== undefined && response.rows.length) {\r\n                _.each(response.rows, function(row) {\r\n                    object = {};\r\n                    i = 0;\r\n                    for(i in row) {\r\n                        key = self.settings.fields[i];\r\n                        object[key] = (key === \"salaries\" || key === \"count\" ? parseInt(row[i], 0) : row[i]);\r\n                    }\r\n                    objects.push(object);\r\n                    \r\n                    // Add to the totals\r\n                    self.count += object.count || 0;\r\n                    self.sum += object.salaries || 0;\r\n                });\r\n            }\r\n            return objects;\r\n        }\r\n    });\r\n    \r\n    app.Collections.Employees = Backbone.Collection.extend({\r\n        defaultSettings: {\r\n            fields: [\"departmentid\", \"department\", \"lastname\", \"firstname\", \"middleinitial\", \"title\", \"salary\", \"salarygroup\", \"id\"]\r\n            ,group: false\r\n            ,orderby: \"salary\"\r\n            ,dir: \"desc\"\r\n            ,limit: 30\r\n            ,offset: 0\r\n        }\r\n        ,initialize: function(models, options) {\r\n            this.settings = _.defaults(options.settings || {}, this.defaultSettings); // Incorporate any URL parameters\r\n            this.moreAvailable = false; // Initialize this property\r\n            this.sortProps = util.getSortProps(this.settings);\r\n        }\r\n        ,url: function() { return db.buildUrl(db.query(this.settings)) + \"&callback=?\"; }\r\n        ,export: function() { return db.buildExportUrl(db.query(_.omit(this.settings, [\"limit\", \"offset\"]))); }\r\n        ,parse: function(response) {\r\n            // Convert array of arrays to array of objects with our keys/fields\r\n            var self = this\r\n                ,newRows = []\r\n                ,newRow, i, key;\r\n            if(response.rows !== undefined && response.rows.length) {\r\n                // If we received our limit + 1, we know there's another page available, and we remove that +1 from the collection\r\n                if(response.rows.length > this.settings.limit) {\r\n                    this.moreAvailable = true;\r\n                    response.rows.pop();\r\n                } else {\r\n                    this.moreAvailable = false;\r\n                }\r\n                // Add keys/field names to each row\r\n                _.each(response.rows, function(row) {\r\n                    newRow = {};\r\n                    i = 0;\r\n                    for(i in row) {\r\n                        key = self.settings.fields[i];\r\n                        newRow[key] = (key === \"salary\" ? parseInt(row[i], 0) : row[i]);\r\n                    }\r\n                    newRows.push(newRow);\r\n                });\r\n            }\r\n            return newRows;\r\n        }\r\n    });\r\n    \r\n})(window, window.jQuery, window._, window.Backbone, window.Salaries, window.FusionTable, window.util);"]],"start1":0,"start2":0,"length1":0,"length2":4224}]],"length":4224,"saved":false}
{"ts":1362504240265,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"    app.Collections.SalaryGroups = Backbone.Collection.extend({\r\n        defaultSettings: {\r\n            fields: [\"count\", \"salarygroup\"]\r\n            ,group: true\r\n            ,orderby: \"salarygroup\"\r\n            ,dir: \"asc\"\r\n        }\r\n        ,initialize: function(models, options) {\r\n            this.settings = _.defaults(options.settings || {}, this.defaultSettings);\r\n            //this.count = 0;\r\n        }\r\n        ,comparator: function(model) {\r\n            return model.get(\"salarygroup\");\r\n        }\r\n        ,sync: function(method, model, options) {\r\n            if(method !== \"read\") options.error(\"Invalid request method\");\r\n            else db.query(this.settings, options.success, options.error);\r\n        }\r\n        ,parse: function(response) {\r\n            // Convert array of arrays to array of objects with our keys/fields\r\n            var objects = [], object, i, key, self = this;\r\n            _.each(response.rows, function(row) {\r\n                object = {};\r\n                i = 0;\r\n                for(i in row) {\r\n                    key = self.settings.fields[i];\r\n                    object[key] = parseInt(row[i], 0);\r\n                }\r\n                objects.push(object);\r\n                \r\n                // Add to the total\r\n                self.count += object.count || 0;\r\n            });\r\n            return objects;\r\n        }\r\n    });\r\n    \r\n"],[0,"})(windo"]],"start1":4113,"start2":4113,"length1":16,"length2":1403}]],"length":5611,"saved":false}
